# Creating package.json:

	$ npm init -> asks series of questions, answer them to create package.json

- setting defaults:

		$ npm set init-author-name 'Punith K'
		$ npm set init-author-email 'abc@abc.com'

- To delete a default settings:

		$ npm config delete init-author-name
		$ ls ~/.npmrc -> all config data stored here

- To install a package only for developement and not for production use, -D or --save-dev
flag while installing, it will put the package to 'DevDependencies' section of the package.json

		$ npm install --save-dev/D karma (karma is an testing package)

- Installing specific versions:

		$ npm install underscore@1.8.3 --save --save-exact //  To install the specific version of the package, also can specify '@1.8.x' to get the latest minor version, and '@">1.1.0  <1.4.0"' (can install 1.3.0), can also use '||' operator within double quotes.

		'~' character before the version in the package.json gets the latest minor version of that package though we have specified any minor version in the package.json, for ex, "underscore" : "~1.5.1" - it gets the latest version 1.5.4
		'^' charcter before the versin in the package.json gets the recent release of that package

		Use '*' or 'x' to get the latest version of that package;

- `$ npm ll -g --depth=0` - will return all installed global packages with information
- `npm home lodash` - loades the home page of specified package
- `npm repo lodash` - loads the repo of the specified package

- Listing the packages:

		$ npm list -> to list the dependencies, pass '--depth 1' option to it to ge the imidiate dependenies of each dependecies

		$ npm list --global true -> to get the globally installed packages, can also add '--depth' flag to short the list

		$ npm list --depth 0 --long true -> To get more details about the package, '--dev true' flag to list dev dependencies, '--prod true' flag to get production dependencies

- Uninstall and remove a dependeny from package.json

		$ npm uninstall <package-name> --save or can use $ npm rm/un/r <package-name>, add '-g' flag to uninstall the global package

- Updating the packages:

		$ npm update

- Installing from git repo and gist:

		$ npm install <path-to-git/path-to-custom-url>

		$ npm install gist:<gist-hash> --save

- Installing from a folder:

		$ npm install <path-to-network/local-folder>

		$ npm prune -> to clean the packages, '--production' flag will remove the all dev dependencies

		$ npm repo <package-name> -> Take you to repository location of that package

- Updating npm itself:

		$ npm install npm@latest -g -> Make sure you run in administrator privilege, @beta can be specified to get if any beta versions exist

		for ex:

			$ npm install -g npm@latest-3 -> installs the latest npm version 3, in this case it gets 3.10.10

- Simple Scripts:

		Use scripts section to use default, test and start scripts
		for ex:
		"scripts" : {
			"test" : "node test.js", -> can be run as, $ npm test
			"start" : "node indrc.js", -> can be run as, $ npm start
			"uglify" : "uglify compress" -> can be run as, $ npm run uglify
		}

- Publish npm packages

		Signup in npmjs.org
		Add the user in command line using,

		$ npm adduser -> Prompts for username, password, and e-mail address

		Create a git repo and set the project to reference to it, run npm publish to publish it

		$ npm publish

		create a tag for the version released in git repo

- Update the package:

		$ npm version <patch/minor/major> -> To update the appropriate version

		it commits and creates the tag for us.

		and publish it again

- Release a beta version:

		Update the version as, 1.1.0-beta.0

		Push the changes to git, create a tag and publish it using,

		$ npm publish --tag beta

- checking for npm packages

		npm install > npm list > npm dedupe > npm prune > npm run prod-build

- Removing npm from local cache & local folder of npm packages:
	user/<username>/AppData/Roaming/npm or npm-cache

		$ npm cache verify

- Check for installed npm packages:

	-	To list all the packages installed and its dependencies
		$ npm list => -g option to check for global variables

	-	Lists only top  level packages
		$ npm list --depth = 0

	- List packages of a given package
		$ npm list react

	- To check the version of a package
		$ npm view cowsay version

	- To discover new releases of the packages, you run
		$ npm outdated
