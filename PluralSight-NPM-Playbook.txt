# npm shortcuts:

https://docs.npmjs.com/misc/config

package.json -> to track the dependencies, to create scripts

# Creating package.json:

	$ npm init -> asks series of questions, answer them to create package.json

# setting defaults:
	
	$ npm set init-author-name 'Punith K'
	$ npm set init-author-email 'abc@abc.com'

# To delete a default settings:

	$ npm config delete init-author-name

	$ ls ~/.npmrc -> all config data stored here

# To install a package only for developement and not for production use, -D or --save-dev flag while installing, it will put the package to 'DevDependencies' section of the package.json
	
	$ npm install --save-dev/D karma (karma is an testing package)

# Installing specific versions:

	$ npm install underscore@1.8.3 --save --save-exact ->  To install the specific version of the package, also can specify '@1.8.x' to get the latest minor version, and '@">1.1.0  <1.4.0"' (can install 1.3.0), can also use '||' operator within double quotes.

	'~' character before the version in the package.json gets the latest minor version of that package though we have specfied any minor version in the package.json, for ex, "underscore" : "~1.5.1" - it gets the latest version 1.5.4

	'^' charcter before the versin in the package.json gets the recent release of that package

	Use '*' or 'x' to get the latest version of that package;

# Listing the packages:

	$ npm list -> to list the dependencies, pass '--depth 1' option to it to ge the imidiate dependenies of each dependecies

	$ npm list --global true -> to get the globally installed packages, can also add '--depth' flag to short the list

	$ npm list --depth 0 --long true -> To get more details about the package, '--dev true' flag to list dev dependencies, '--prod true' flag to get production dependencies

# Uninstall and remove a dependeny from package.json
	
	$ npm uninstall <package-name> --save or can use $ npm rm/un/r <package-name>, add '-g' flag to uninstall the global package

# Updating the packages:

	$ npm update

# Installing from git repo and gist:
	
	$ npm install <path-to-git/path-to-custom-url>

	$ npm install gist:<gist-hash> --save

# Installing from a folder:

	$ npm install <path-to-network/local-folder>

	$ npm prune -> to clean the packages, '--production' flag will remove the all dev dependencies

	$ npm repo <package-name> -> Take you to repository location of that package

# Updating npm itself:

	$ npm install npm@latest -g -> Make sure you run in administrator privilege

# Simple Scripts:
	
	Use scripts section to use default, test and start scripts
	for ex:
	"scripts" : {
		"test" : "node test.js", -> can be run as, $ npm test
		"start" : "node indrc.js", -> can be run as, $ npm start
		"uglify" : "uglify compress" -> can be run as, $ npm run uglify
	}

# 