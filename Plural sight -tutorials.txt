----------------------------------
JavaScript objects and properties:
----------------------------------

> 	Define a property of an object:

		var cat = {
			name: {first: 'Fluffy', last: 'LaBeouf'},
			color: 'White'
		};

		Object.defineProperty(cat, 'fullName', {
			get: function() {
				return this.name.first + ' ' + this.name.last;
			},
			set: function(value) {
				var nameParts = value.split(' ');
				this.name.first = nameParts[0];
				this.name.last = nameParts[1];
			}
		});

		Usage of getter and setter:

		cat.fullName = 'Muffin Top';
		display(cat.fullName);
		display(cat.name.first);

>	Prototypes:

		Defining prototype to get the last element of an array:
		
		var arr = ['red', 'blue', 'green'];

		var last = arr.last // given undefined because last property is not defined on JavaScript array, it can be added as follows,

		Object.defineProperty(arr, 'last', { // Defines last property on arr object, if you want to do it on Array object, replace arr with 'Array.prototype'
		get: function() {
				return this[this.length-1];
			}
		});

		var myFunc = function() {}; display(myFunc.prototype); returns an empty {}
		var cat = {name: 'abc'}; display(cat); returns undefined, it has no prototype, it has __proto__ property, accessed using object.__proto__

		A Funtion's prototype: is the object 'instance' that will become the prototype for all objects created using this function as a constructor.
		An Object's prototype: is the object instance from which the object is inherited.

		function Cat(name, color) {
			this.name = name;
			this.color = color;
		}

		Cat.prototype.age = 3, will add age prototype to cat function (Can also be created as, Cat.prototype = {age: 5};)

		var fluffy = new Cat('Fluffy', 'White');
		var muffin = new Cat('Muffin', 'Brown');

		display(fluffy.age); display(muffin.age); // will display age '4' 

		fluffy.age = 5; // it adds new property to fluffy object and display(fluffy.age) displays '5' 
		and fluffy.__proto__.age will still display '4' since it's a prototype not an property

	> Creating prototype chains:

		Function Animal(voice) {
			this.voice = voice || 'grunt';
		}
		// Making all the animals make sound
		Animal.prototype.speak = function() {
			display(this.voice);
		}

		// Adding animal prototype to Cat
		Cat.prototype = Object.create(Animal.prototype);

		fluffy.speak(); will display 'Grunt'

		It can be called from Cat function as,
		function Cat(name, color) {
			Animal.call(this, 'Meow');
			this.name = name;
			this.color = color;
		}

		this will make Cat object as Animal and if you want it as Cat instance,
		Cat.prototype.constructor = Cat

		fluffy.__proto__ -> returns Cat; and fluffy.__proto__.__proto__-> returns Animal

	> Creating prototypes with classes:

		Class Animal {
			constructor(voice) {
				this.voice = voice || 'Grunt';
			}

			speak() = {
				display(this.voice);
			} 
		}

		Class Cat extends Animal {
			constructor(name, color) {
				super('Meow');
				this.name = name;
				this.color = color;
			}
		}

-------
JQuery
-------

>	Load JQuery from CDN if it fails add the script tag as follows,

		<script>
			window.JQuery || document.write('<script src="jquery.js"><\/script>')
		</script>

>	Selectors:

		$('a[title="Programming"]') // selects <a> elememts that have a title attribute with the specified value
		or
		$('a[title]') // selects <a> elememts that have a title attribute

		$(':input') // selects all input elements, including button, select, textares, button, images, radio and more
		$(':input[type="radio"]') // Selects all radio buttons on the page, and 
		$('input') selects only selects input fields

		$('input[value^="sample"]') // Selects any input element whose value attribute begins with "sample" (Case sensitive), use $ to find ends with
		and use * to find a word contains.

		$('div:contains("my div")')

		$('div:eq(0)') Finds the first div

>	Interaction with DOM:

		Iterating through nodes:

			$('div').each(function(index) {
				$(this).text(); // need to wrap JQuery object to this element
			});

			or 

			$('div').each(function(index, element) {
				$(element).text(); // No need to wrap JQuery object, element refers to this
			});

>	Appending or removing nodes:
	
		$('<span>(office)</span>').appendTo('.officePhone'); (or)

		$('.officePhone').append('<span>(office)</span>');

		prepend will add it to the begining of the elements

		wrap() - Wrapping elements

		<div class="state">Arizona</div>

		$('.state').wrap('<div class="US_State"/>'); this will results in 

			<div class="US_State">
				<div class="state">Arizona</div>
			</div>

		.remove() is used to remove the nodes.

		addClass(), removeClass(), toggleClass()

>	Handling Events: Identifying event type, event.type -> returns a string
	
		Multiple events and handlers can be defined in on() using a map:

		$('#MyTabe tr').on({
			mouseenter: function() {
				$(this).addClass('mouseEnter');
			},
			mouseleave: function() {
				$(this).removeClass('mouseEnter');
			},
			mouseover: function() {
				// Any other action
			}
		});

		hover(moseenter, mouseleave);

		toggle() // toggels through functions defined within

>	Ajax in jQuery
	
		$.get() and $.post() : gets raw data from the server
		$(selector).load() : Loads html data from the sever
		$.getJSON() : get/post and return JSON
		$.ajax() : core functionality

		jQuery ajax functions work with REST API's and web services

		$('#myDiv').load('../sample.html #myID'); // Which loads only #myID content from the sample.html

		$.get(url, data, callback, datatype);
		
		$.get('sample.html', function(data){
			$('#outputDiv').html(data);
		});

----------------------------------
Grunt: The JavaScript Task Runner:
----------------------------------

	-	Task-based command line build tool for JavaScript projects which makes performming repetative, but neccesary, task trivial
	-	Validates css/html/JavaScript
	-	Minify or compress CSS/Javascript
	-	Compile CoffeeScript, TypeScript etc.,
	-	Compile less to CSS

	# Files required:

		-	package.json metadata file which discribes the project
			ex: package.json

				{
					"name" : "IntroductionToGrunt.js",
					"version" : "0.1.0",
					"devDependencies" : {
						"grunt" : "~0.4.1"
					}
				}

				Ref: https://www.nodejitsu.com/documentation/appendix/package-json/

		-	Gruntfile.js -> configure or define GRUNT tasks
			ex: Gruntfile.js

				'use strict';
				module.exports = function(grunt) {
					grunt.initConfig({
						pkg: grunt.file.readJSON('package.json')
					});
					uglify: {
				      options: {
				        banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
				      },
				      build: {
				        src: 'src/<%= pkg.name %>.js',
				        dest: 'build/<%= pkg.name %>.min.js'
				      }
				    }

					// Load the plugin that provides the "uglify" task.
					grunt.loadNpmTasks('grunt-contrib-uglify');

					// Default task(s).
					grunt.registerTask('default', ['uglify']);
				};

			- 	Run in commandline
				$grunt taskName -v

	# Installation:

		-	First install node.js, install npm (node package manager), then install Grunt cli - command line interface, run,

			$npm install -g grunt-cli // here -g means global (to make sure grunt is available in all the folders in the system)
		
		-	then, install grunt to local directory by running,
		
			$npm install grunt --save-dev // Saves to local directory

	# Sample grunt example:

		Download 'grunt-contrib-clean' to use it, use npm to download, once downloaded it adds it to package.json automatically/we can add it 
		manually, add this to Gruntfile.js

			use strict';

			module.exports = function(grunt) {
				grunt.initConfig({
					pkg: grunt.file.readJSON('package.json')
					clean: {
					output: ['ToBeCleaned/*']
					}
				)};

				grunt.loadNpmTasks('grunt-contrib-clean');

				grunt.registerTask('default', ['clean']);
			};

		-	run using, $grunt default -v // -v says verbose mode

	# Working with JavaScript:

		-	Validating JS with JSHint 	-> 	$npm install -grunt-contrib-jshint --save-dev

		-	Compressing JS with Uglify 	->	$npm install -grunt-contrib-uglify --save-dev , off/on mangling - feature to rename variables and 		methods to meaningfull names for development so that somebody can not interpret it easily.

		-	Cleaning folders and files with clean	->	$npm install -grunt-contrib-clean --save-dev

	# Using JSHint:

		-	Load and register it, specify in Gruntfile.js,
				grunt.loadNpmTasks('grunt-contrib-jshint'); then add it to registerTask
				grunt.registerTask('default', ['typescript', 'jshint']); -- these will run sequentially

		-	Then add the following entry to, grunt.initConfig({
				jshint: {
					options: {
						force: true // It forcefully continues, can be removed when below options are set
						'-W069': false, // failure due to the way typescript works with enums 
						'W0004': false, // failure due to typescript inheritance
						ignores: ['path/to/js-file-to-ignore'], // Can be a multiple files seperated by comma
						reporterOutput: './jshint.txt' // Writing these erros to output file
					},
					files: ['./www/js/*.js']
				},
			});

	# Using uglify:

		-	Load and register it, specify in Gruntfile.js,
				grunt.loadNpmTasks('grunt-contrib-uglify');
				grunt.registerTask(default, ['typescript','uglify']);
		
		-	Add this entry to, grunt.initConfig({ 
				uglify: {
					development: {
						files: {
							'': [''] 	
							// which will compress one file in the root folder, multiple files can be added seperated by comma, or
							// The following files option can be used to scan the files as when they are added,
								files : [{
										expand: true,
										cwd: './www/js/',
										src: '**/*.js',
										dest: './www/js/'
									}]
						}
					},
					options: {
						mangle: false, // Keeps original variable names and method names intact
						compress: {
							drop_console: true // Which removes all the console.log() from the code, then compresses it
						},
						beautyfy: true // Helps in debugging the code, can be turned off before deploying
					}
				}
			});

	# Using clean:

		-	Load and register it,

				grunt.loadNpmTasks('grunt-contrib-clean');
				grunt.registerTask(default, ['clean', typescript','uglify']); 	// 	can be specified first, since we need clean up every time 																		building it freshly

		-	Add this entry to, grunt.initConfig({ 
				clean: {
					options: {

					},
					files: ['file/to/to/be/removed'],
					folders: ['folder/to/remove']
				}
			});

		-	A single task can be specified in the grunt command line, so that we can have control over the execution, ex: $grunt clean and with 	options, $grunt clean:folders

	# Working with HTML and CSS:

		-	Compressing HTML with contrib-htmlmin 	->	$npm install grunt-contrib-htmlmin, remove html comments, collapse white-space and tags, 	 remove redundant tag elements 

		-	Validating HTML with htmlHint 			->	$npm install grunt-htmllhint, ensure unique tag id's, ensure valid attributes, tags are 	correct and valid

		-	Converting less to css with contrib-less ->	$npm install grunt-contrib-less, modify less variables, compress

		-	Validating CSS with contrib-csslint		->	$npm install grunt-contrib-csslint, configure rules (35 rules), use external config file

		-	Compress CSS with cssmin				->	$npm install grunt-contrib-cssmin, compress, minify single/mutiple or concat to one file

	# Using htmlHint: 

		-	Add this entry to, grunt.initConfig({ 
				htmlhint: {
					templates: {
						options: {
							'attr-lower-case': true,
							'attr-value-not-empty': true,
							'tag-pair': true,
							'tag-self-close': true,
							'tagname-lowercase':true,
							'id-class-value': true,
							'id-class-unique': true,
							'src-not-empty': true,
							'img-alt-required': true
						},
						src: ['www/**/*.html']
					}
				}
			});

	# Using htmlmin:

		-	Add this entry to, grunt.initConfig({ 
				htmlmin: {
					dev: {
						options: {
							removeEmptyAttributes: true,
							removeEmptyElements: true,
							removeRedundantAttributes: true,
							removeComments: true,
							removeOptionalTags: true,
							collapseWhitespace: true
						},
						files: {
							'www/template/sample.min.html' : ['www/template/sample.html']
							// The following files option can be used to scan the files as when they are added,
								files : [{
										expand: true,
										cwd: './www/html/',								
										dest: './www/html/',
										src: '[*.html]',
										ext: '.min.html',
										extDot: 'last'
									}]
						} 
					}
				}
			});	

	# Using less: Creates css from less

		-	Add this entry to, grunt.initConfig({ 
				less: {
					development: {
						options: {
							cleancss: true,
							compress: true,
							modifyVars: {
								"color-primary-dark-value": "NOT_BLUE" // value in a less file modified
							}
						},
						files: { "www/css/main.css" : "www/css/main.less" }
						// The following files option can be used to scan the files as when they are added,
								files : [{
										expand: true,
										cwd: './www/css/',
										dest: './www/css/',
										src: '[*.less]',
										ext: '.css',
										extDot: 'last'
									}]
					}
				}
			});

	# Using csslint: By default all the rules are enabled, to disable some, use external config file as specified in options using, csslintrc 					 option

		-	Add this entry to, grunt.initConfig({ 
				pkg: grunt.file.readJSON('package.json'),

				csslint: {
					strict: {
						options: {
							
						},
						src: ['www/css/sample.css']
					},
					laxed: {
						options: {
							'zero-units': false // passing external source as options can be done using,
							csslintrc : 'lintrules.json'
						},
						src: ['www/css/sample.css']
					}
				}
			});

			Run laxed in command line as follows, $grnt csslint:laxed

	# Using cssmin:

		-	Add this entry to, grunt.initConfig({ 
				pkg: grunt.file.readJSON('package.json'),

				cssmin: {
					min: {
						options: {
							"report": "gzip"
						},
						files: {
							'www/css/sample.min.css': ['www/css/sample.css']
						} 
					}

					// To use minify multiple files dynamically, use minify property rather than min option under cssmin (remove min property)
					minify: {
						expand: true,
						cwd: './www/css/',
						dest: './www/css/',
						src: ["*.css", "!*.min.css"]', // To not to already minified files,  negate the file extension
						ext: '.min.css',
						extDot: 'last'			
					},

					// To create one minified css file
					concat: {
						options: {

						},
						files: {
						 	'www/css/sample.min.css': ['www/css/*.css']
						}
					}

				}
			});

	# Advanced grunt: Scaffholding and custom plugins

		-	

---------------------
Java Design patterns:
---------------------

>	Creational: Different types:
		-	Singleton
		-	Builder
		-	Prototype
		-	Factory
		-	Abstract factory

	# Singleton:
			-	only one instance created
			-	Gurantees control of a resource
			-	Lazily loaded
				ex: Runtime, Logger, Spring beams, graphic managers
			-	Static in nature but not the class, since static classes are not thread safe, private instance and private constructor, no parameter required for construction

	Code examples:
	--------------
	> 	Simple Singleton:

		private static SingletonSample instance = new SingletonSample();

		private SingletonSample() {

		}

		public static SingletonSample getInstance() {
			return instance;
		}

	> 	Lazy Loading:

		private static SingletonSample instance = null;

		private SingletonSample() {

		}

		public static SingletonSample getInstance() {
			if(instance == null) {
				instance = new SingletonSample();
			}

			return instance;
		}

	> 	Thread safe:

		private static SingletonSample instance = null;

		private SingletonSample() {

		}

		public static SingletonSample getInstance() {
			if(instance == null) {
				synchronized(SingletonSample.class) {
					if(instance == null) {
						instance = new SingletonSample();
					}
				}
			}

			return instance;
		}

		Can also be synchronized at the getInstance() method by making it synchronized, ex: public static synchronized SingletonSample getInstance() { }, this will make sure every time it's thread safe. To make sure there is no race condition we will use the above approach

	> 	Pitfalls:
		-	Difficult to write unit tests
		- 	Not thread safe, if not carefull
		-	java.util.Calendar is not a singleton but is a prototype

	>	Comparision with factory
		-	no interface / interface driven
		-	Returns the same instance / returns multiple instances (multiple constructors)
		-	Hard to unit test / testable

	# Builder Pattern:
		-	Handle complex constructors
		-	Large number of parameters
		-	immutability
			Ex: StringBuilder, DocumentBuilder, Locale.Builder
			constructing constructors with diffent params is called a "telescoping constructors"
		-	Written with static inner class
		-	Negates the need for exposed setters

	Code example:
	--------------
		public class BuilderDemo {

			private final String meat;
			private final String condiments;

			private BuilderDemo(Builder builder) {
				this.meat = builder.meat;
				this.condiments = builder.condiments;
			}

			public String getMeat() {
				return meat;
			}

			public String getCondiments() {
				return condiments;
			}

			private static class Builder {

				private String meat;
				private String condiments;

				public Builder meat(String meat) {
					this.meat = meat;
					return this;
				}

				public Builder condiments(String condiments) {
					this.condiments = condiments;
					return this;
				}

				public BuilderDemo build() {
					return new BuilderDemo(this);
				}
			}
		}

		// Demo
			BuilderDemo.Builder builder = new BuilderDemo.Builder();
			BuilderDemo obj = builder.meat("meat").condiments("condiments").build();
			obj.getMeat(); // will return meat

			or 
			BuilderDemo object = new BuilderDemo.Builder().meat("meat").condiments("condiments").build();

	# Prototype pattern:
		-	To get the unique instance of the same object
		-	Avoids costly creation
		-	Avoids subclassing
		-	Typically don't use keyword new
		-	Utilizes interfaces
			ex: clone() method on object
		-	implements Clone/Clonable interface
		-	each instance is unique

	> pitfalls:
		-	Sometimes not clear when to use
		-	Used with other pattern; when pattern contains other pattern it's called a framework

	# Factory pattern:
		-	Doesn't expose instantiation logic
		-	Defers instantiation to subclass
		-	It exposes common interface
			ex: Calendar, ResourceBundle, NumberFormat

	Code Example:
	------------
		public abstract class Website {
			protected List<Page> pages = new ArrayList<>();

			// Add getter to pages

			public Website() {
				this.createWebsite();
			}

			public abstract void createWebsite(); // Factory method
		}

		public class Blog extends Website {

			@override 
			public void createWebsite() {
				pages.add(new PostPage());
				pages.add(new AboutPage());
			}
		}

		// Factory class
		public class WebsiteFactory {

			public static Website getWebsite(String siteType) {

				switch(siteType) {
					case "blog": { 
						return new Blog();
					}

					case "shop": {
						return new Shop(); // Shop extending website abstract class
					}

					default: {
						return null;
					}
				}
			}
		}

		// Demo

		public class Demo {

			psvm() {
				Website site = WebsiteFactory.getWebsite("blog");
				sysout(site.getPages());
			}
		}

	# Abstact Factory Pattern:
		-	Factory of factories
		-	Factory of releated objects
		- 	Common interface, and deferring the instantiation to subclass
			ex: DocumentBuilder, frameworks
		-	Composition used

------------------
SOAP Web services: Simple Object Access Protocol
------------------

-	WSDL: Web service description/definition language
- 	UUDI: Universal Description Discovery and Integration - registry where new web services are registered
-	SEI: Service endpoint interface - data from XML is mapped to actual objects

-	If javaEE installed we can import WSDL in command line using, "wsimport" keyword
	$wsimport <WSDL-URI> // which will keep only .class files in the generated folder, if you want both .java and .class use the option,
	$wsimport -keep -s src <URI> ; where src is the folder name// sample URI: http://www.webservicex.net/geoipservice.asmx?WSDL

	# Download and run the glashFish server to deply the services

-	Once downloaded extract and go to /bin and run, C:/bin>asadmin start-domain ; then access it using localhost:4848 port by default and 			configure the same in eclipse; then create dynmic web project to get started

-	Annonate a class with @WebService and can be deployed as web service. Any public method in that class will be treated as Webmethod or can be 	 annotated with @WebMethod, use, exclude=true option to exclude the particular method from the webservice.

-	By default types of data used in the web service is imported from external link to WSDL under <types> tag, which can be avoided using the 		following annotation on class level, @SOAPBinding(style = Style.RPC), which will add <message> tag for both input and output response. By 		default style is Document. 

	@WebResult(partName = "lookupOutput") specified on method -> to change <part> tag name for response, and @WebParam(partName = "lookupInput") specified before a parameters -> to change <part> tag name for request

-	Interface (Serivie end point interface) can be created and interface can have all the annotations needed to perform the webservice,
	once SEI is implemented add this @WebService(endpointInterface="fully qualified class name(package name ans interface class name)") to implemented class

-	JAXB - Java Architecture for XML Binding - used to map custom objects like Collections to XML
	if any class specified with @XmlRootElement annotation it needs no arg public constructor, JAXB uses it to initialize the object

-------------------
JavaScript Testing:
-------------------

	# QUnit:

		-	

















	














	

	



